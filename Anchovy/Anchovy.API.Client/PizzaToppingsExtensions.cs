// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class PizzaToppingsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static PizzaTopping DeletePizzaTopping(this IPizzaToppings operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPizzaToppings)s).DeletePizzaToppingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<PizzaTopping> DeletePizzaToppingAsync(this IPizzaToppings operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.PizzaTopping> result = await operations.DeletePizzaToppingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static PizzaTopping GetPizzaTopping(this IPizzaToppings operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPizzaToppings)s).GetPizzaToppingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<PizzaTopping> GetPizzaToppingAsync(this IPizzaToppings operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.PizzaTopping> result = await operations.GetPizzaToppingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        public static IList<PizzaTopping> GetPizzaToppings(this IPizzaToppings operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPizzaToppings)s).GetPizzaToppingsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<PizzaTopping>> GetPizzaToppingsAsync(this IPizzaToppings operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.PizzaTopping>> result = await operations.GetPizzaToppingsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='pizzaTopping'>
        /// Required.
        /// </param>
        public static PizzaTopping PostPizzaTopping(this IPizzaToppings operations, PizzaTopping pizzaTopping)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPizzaToppings)s).PostPizzaToppingAsync(pizzaTopping);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='pizzaTopping'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<PizzaTopping> PostPizzaToppingAsync(this IPizzaToppings operations, PizzaTopping pizzaTopping, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.PizzaTopping> result = await operations.PostPizzaToppingWithOperationResponseAsync(pizzaTopping, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='pizzaTopping'>
        /// Required.
        /// </param>
        public static object PutPizzaTopping(this IPizzaToppings operations, int id, PizzaTopping pizzaTopping)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPizzaToppings)s).PutPizzaToppingAsync(id, pizzaTopping);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IPizzaToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='pizzaTopping'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutPizzaToppingAsync(this IPizzaToppings operations, int id, PizzaTopping pizzaTopping, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutPizzaToppingWithOperationResponseAsync(id, pizzaTopping, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
