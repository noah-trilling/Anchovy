// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class MenuListingsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static MenuListing DeleteMenuListing(this IMenuListings operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMenuListings)s).DeleteMenuListingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<MenuListing> DeleteMenuListingAsync(this IMenuListings operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.MenuListing> result = await operations.DeleteMenuListingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static MenuListing GetMenuListing(this IMenuListings operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMenuListings)s).GetMenuListingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<MenuListing> GetMenuListingAsync(this IMenuListings operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.MenuListing> result = await operations.GetMenuListingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        public static IList<MenuListing> GetMenuListings(this IMenuListings operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMenuListings)s).GetMenuListingsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<MenuListing>> GetMenuListingsAsync(this IMenuListings operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.MenuListing>> result = await operations.GetMenuListingsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='menuListing'>
        /// Required.
        /// </param>
        public static MenuListing PostMenuListing(this IMenuListings operations, MenuListing menuListing)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMenuListings)s).PostMenuListingAsync(menuListing);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='menuListing'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<MenuListing> PostMenuListingAsync(this IMenuListings operations, MenuListing menuListing, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.MenuListing> result = await operations.PostMenuListingWithOperationResponseAsync(menuListing, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='menuListing'>
        /// Required.
        /// </param>
        public static object PutMenuListing(this IMenuListings operations, int id, MenuListing menuListing)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMenuListings)s).PutMenuListingAsync(id, menuListing);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IMenuListings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='menuListing'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutMenuListingAsync(this IMenuListings operations, int id, MenuListing menuListing, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutMenuListingWithOperationResponseAsync(id, menuListing, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
