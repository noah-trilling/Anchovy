// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class ToppingsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Topping DeleteTopping(this IToppings operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToppings)s).DeleteToppingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Topping> DeleteToppingAsync(this IToppings operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Topping> result = await operations.DeleteToppingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Topping GetTopping(this IToppings operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToppings)s).GetToppingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Topping> GetToppingAsync(this IToppings operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Topping> result = await operations.GetToppingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        public static IList<Topping> GetToppings(this IToppings operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToppings)s).GetToppingsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Topping>> GetToppingsAsync(this IToppings operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.Topping>> result = await operations.GetToppingsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='topping'>
        /// Required.
        /// </param>
        public static Topping PostTopping(this IToppings operations, Topping topping)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToppings)s).PostToppingAsync(topping);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='topping'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Topping> PostToppingAsync(this IToppings operations, Topping topping, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Topping> result = await operations.PostToppingWithOperationResponseAsync(topping, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='topping'>
        /// Required.
        /// </param>
        public static object PutTopping(this IToppings operations, int id, Topping topping)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToppings)s).PutToppingAsync(id, topping);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IToppings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='topping'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutToppingAsync(this IToppings operations, int id, Topping topping, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutToppingWithOperationResponseAsync(id, topping, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
