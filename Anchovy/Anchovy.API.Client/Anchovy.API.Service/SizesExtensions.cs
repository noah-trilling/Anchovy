// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class SizesExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Size DeleteSize(this ISizes operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISizes)s).DeleteSizeAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Size> DeleteSizeAsync(this ISizes operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Size> result = await operations.DeleteSizeWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Size GetSize(this ISizes operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISizes)s).GetSizeAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Size> GetSizeAsync(this ISizes operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Size> result = await operations.GetSizeWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        public static IList<Size> GetSizes(this ISizes operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISizes)s).GetSizesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Size>> GetSizesAsync(this ISizes operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.Size>> result = await operations.GetSizesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='size'>
        /// Required.
        /// </param>
        public static Size PostSize(this ISizes operations, Size size)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISizes)s).PostSizeAsync(size);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='size'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Size> PostSizeAsync(this ISizes operations, Size size, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Size> result = await operations.PostSizeWithOperationResponseAsync(size, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='size'>
        /// Required.
        /// </param>
        public static object PutSize(this ISizes operations, int id, Size size)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISizes)s).PutSizeAsync(id, size);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISizes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='size'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutSizeAsync(this ISizes operations, int id, Size size, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutSizeWithOperationResponseAsync(id, size, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
