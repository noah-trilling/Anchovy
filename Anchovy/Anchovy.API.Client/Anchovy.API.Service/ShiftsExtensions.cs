// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class ShiftsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Shift DeleteShift(this IShifts operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShifts)s).DeleteShiftAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Shift> DeleteShiftAsync(this IShifts operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Shift> result = await operations.DeleteShiftWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Shift GetShift(this IShifts operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShifts)s).GetShiftAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Shift> GetShiftAsync(this IShifts operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Shift> result = await operations.GetShiftWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        public static IList<Shift> GetShifts(this IShifts operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShifts)s).GetShiftsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Shift>> GetShiftsAsync(this IShifts operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.Shift>> result = await operations.GetShiftsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='shift'>
        /// Required.
        /// </param>
        public static Shift PostShift(this IShifts operations, Shift shift)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShifts)s).PostShiftAsync(shift);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='shift'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Shift> PostShiftAsync(this IShifts operations, Shift shift, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Shift> result = await operations.PostShiftWithOperationResponseAsync(shift, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='shift'>
        /// Required.
        /// </param>
        public static object PutShift(this IShifts operations, int id, Shift shift)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShifts)s).PutShiftAsync(id, shift);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IShifts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='shift'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutShiftAsync(this IShifts operations, int id, Shift shift, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutShiftWithOperationResponseAsync(id, shift, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
