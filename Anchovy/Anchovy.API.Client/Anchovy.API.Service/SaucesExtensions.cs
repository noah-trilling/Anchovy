// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class SaucesExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Sauce DeleteSauce(this ISauces operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISauces)s).DeleteSauceAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Sauce> DeleteSauceAsync(this ISauces operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Sauce> result = await operations.DeleteSauceWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Sauce GetSauce(this ISauces operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISauces)s).GetSauceAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Sauce> GetSauceAsync(this ISauces operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Sauce> result = await operations.GetSauceWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        public static IList<Sauce> GetSauces(this ISauces operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISauces)s).GetSaucesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Sauce>> GetSaucesAsync(this ISauces operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.Sauce>> result = await operations.GetSaucesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='sauce'>
        /// Required.
        /// </param>
        public static Sauce PostSauce(this ISauces operations, Sauce sauce)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISauces)s).PostSauceAsync(sauce);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='sauce'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Sauce> PostSauceAsync(this ISauces operations, Sauce sauce, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Sauce> result = await operations.PostSauceWithOperationResponseAsync(sauce, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='sauce'>
        /// Required.
        /// </param>
        public static object PutSauce(this ISauces operations, int id, Sauce sauce)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISauces)s).PutSauceAsync(id, sauce);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ISauces.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='sauce'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutSauceAsync(this ISauces operations, int id, Sauce sauce, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutSauceWithOperationResponseAsync(id, sauce, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
