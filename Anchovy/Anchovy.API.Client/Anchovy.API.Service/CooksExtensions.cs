// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class CooksExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Cook DeleteCook(this ICooks operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICooks)s).DeleteCookAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Cook> DeleteCookAsync(this ICooks operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Cook> result = await operations.DeleteCookWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Cook GetCook(this ICooks operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICooks)s).GetCookAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Cook> GetCookAsync(this ICooks operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Cook> result = await operations.GetCookWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        public static IList<Cook> GetCooks(this ICooks operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICooks)s).GetCooksAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Cook>> GetCooksAsync(this ICooks operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.Cook>> result = await operations.GetCooksWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='cook'>
        /// Required.
        /// </param>
        public static Cook PostCook(this ICooks operations, Cook cook)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICooks)s).PostCookAsync(cook);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='cook'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Cook> PostCookAsync(this ICooks operations, Cook cook, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Cook> result = await operations.PostCookWithOperationResponseAsync(cook, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cook'>
        /// Required.
        /// </param>
        public static object PutCook(this ICooks operations, int id, Cook cook)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICooks)s).PutCookAsync(id, cook);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.ICooks.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cook'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutCookAsync(this ICooks operations, int id, Cook cook, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutCookWithOperationResponseAsync(id, cook, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
