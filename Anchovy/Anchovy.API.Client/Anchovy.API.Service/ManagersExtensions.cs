// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class ManagersExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Manager DeleteManager(this IManagers operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagers)s).DeleteManagerAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Manager> DeleteManagerAsync(this IManagers operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Manager> result = await operations.DeleteManagerWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Manager GetManager(this IManagers operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagers)s).GetManagerAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Manager> GetManagerAsync(this IManagers operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Manager> result = await operations.GetManagerWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        public static IList<Manager> GetManagers(this IManagers operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagers)s).GetManagersAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Manager>> GetManagersAsync(this IManagers operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.Manager>> result = await operations.GetManagersWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='manager'>
        /// Required.
        /// </param>
        public static Manager PostManager(this IManagers operations, Manager manager)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagers)s).PostManagerAsync(manager);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='manager'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Manager> PostManagerAsync(this IManagers operations, Manager manager, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.Manager> result = await operations.PostManagerWithOperationResponseAsync(manager, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='manager'>
        /// Required.
        /// </param>
        public static object PutManager(this IManagers operations, int id, Manager manager)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagers)s).PutManagerAsync(id, manager);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IManagers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='manager'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutManagerAsync(this IManagers operations, int id, Manager manager, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutManagerWithOperationResponseAsync(id, manager, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
