// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Anchovy.API.Client;
using Anchovy.API.Client.Models;
using Microsoft.Rest;

namespace Anchovy.API.Client
{
    public static partial class OrderLinesExtensions
    {
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static OrderLine DeleteOrderLine(this IOrderLines operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOrderLines)s).DeleteOrderLineAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<OrderLine> DeleteOrderLineAsync(this IOrderLines operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.OrderLine> result = await operations.DeleteOrderLineWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static OrderLine GetOrderLine(this IOrderLines operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOrderLines)s).GetOrderLineAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<OrderLine> GetOrderLineAsync(this IOrderLines operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.OrderLine> result = await operations.GetOrderLineWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        public static IList<OrderLine> GetOrderLines(this IOrderLines operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOrderLines)s).GetOrderLinesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<OrderLine>> GetOrderLinesAsync(this IOrderLines operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Anchovy.API.Client.Models.OrderLine>> result = await operations.GetOrderLinesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='orderLine'>
        /// Required.
        /// </param>
        public static OrderLine PostOrderLine(this IOrderLines operations, OrderLine orderLine)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOrderLines)s).PostOrderLineAsync(orderLine);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='orderLine'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<OrderLine> PostOrderLineAsync(this IOrderLines operations, OrderLine orderLine, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Anchovy.API.Client.Models.OrderLine> result = await operations.PostOrderLineWithOperationResponseAsync(orderLine, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='orderLine'>
        /// Required.
        /// </param>
        public static object PutOrderLine(this IOrderLines operations, int id, OrderLine orderLine)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOrderLines)s).PutOrderLineAsync(id, orderLine);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Anchovy.API.Client.IOrderLines.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='orderLine'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutOrderLineAsync(this IOrderLines operations, int id, OrderLine orderLine, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutOrderLineWithOperationResponseAsync(id, orderLine, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
